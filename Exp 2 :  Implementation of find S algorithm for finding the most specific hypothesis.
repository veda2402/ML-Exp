import pandas as pd  # Fixed typo in import
from sklearn.model_selection import train_test_split  # Fixed typo
from sklearn.naive_bayes import CategoricalNB  # Fixed typo
from sklearn.preprocessing import LabelEncoder  # Fixed typo
from sklearn.metrics import accuracy_score

# Dataset
data = {
    'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Sunny', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain', 'Sunny', 'Sunny', 'Overcast', 'Rain'],
    'Temperature': ['Mild', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Mild', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],
    'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],
    'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Strong', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Strong'],
    'play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']
}

df = pd.DataFrame(data)

# Label Encoding
label_encoder = {}
for column in df.columns:
    if df[column].dtype == 'object' or df[column].dtype == 'bool':
        le = LabelEncoder()
        df[column] = le.fit_transform(df[column])
        label_encoder[column] = le

# Splitting data
x = df.drop('play', axis=1)
y = df['play']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)

# Model Training
model = CategoricalNB()
model.fit(x_train, y_train)

# Prediction
y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)

# Results formatting
results_df = x_test.copy()
results_df['Actual'] = y_test.values
results_df['Predicted'] = y_pred  # Removed extra space in column name

# Decoding
for col in results_df.columns:
    if col in label_encoder:
        results_df[col] = label_encoder[col].inverse_transform(results_df[col])

results_df['Actual'] = label_encoder['play'].inverse_transform(results_df['Actual'])
results_df['Predicted'] = label_encoder['play'].inverse_transform(results_df['Predicted'])

# Output
print("\nPrediction Results (Table Format):")
print(results_df.to_string(index=False))

# Fixed string formatting
print(f"\nModel Accuracy: {accuracy * 100:.2f}%")
